<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/public/modUsers.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/simple-peer/simplepeer.min.js"></script>
    <title>Voice Call</title>
</head>
<body>
    <header>
        <%- include('partials/navbar') %>
    </header>
    <div class="pageContent">
        <h1> Voice Call</h1>
        <p id="status">Waiting for Call...</p>
        <button id="callBtn">Call</button>
        <button id="muteBtn" disabled>Mute</button>
        <button id="camBtn" disabled>Disable Camera</button>
        <div id="video-grid"></div>
        <audio id="localAudio" autoplay muted></audio>
        <audio id="remoteAudio" autoplay></audio>

        <script>
            const socket = io();
            const videoGrid = document.getElementById('video-grid');
            const localAudio = document.getElementById('localAudio');
            const remoteAudio = document.getElementById('remoteAudio');
            const callButton = document.getElementById('callBtn');
            const muteButton = document.getElementById('muteBtn');
            const camButton = document.getElementById('camBtn');
            const status = document.getElementById('status');
            
            let peer = null;
            let localStream = null;
            let callConnected = false;
            let muted = false;
            let cam = false;

            let receiverUserId = "<%= toUserId %>";
            
            const senderUserId = "<%= userId %>";
            
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(stream => {
                    localStream = stream;
            
                    const localVideo = document.createElement('video');
                    localVideo.muted = true; 
                    addVideoStream(localVideo, stream);
                    localAudio.srcObject = stream;
            
                    socket.emit('registerUser', senderUserId);
                })
                .catch(err => {
                    console.error('Error accessing media devices:', err);
                });

            callButton.addEventListener('click', () => {
                if (callConnected) {
                    disconnectCall(); 
                } else {
                    if (receiverUserId) {
                        initializeCall(receiverUserId);
                    }
                }
            });

            muteButton.addEventListener('click', () => {
                muted = !muted;
                toggleMute(muted);
            });

            camButton.addEventListener('click', () => {
                cam= !cam;
                toggleCam(cam);
            })
            
            function initializeCall(receiverUserId) {
                peer = new SimplePeer({
                    initiator: true,
                    trickle: false,
                    stream: localStream
                });
            
                peer.on('signal', data => {
                    socket.emit('signal', {
                        signal: data,
                        fromUserId: senderUserId,
                        toUserId: receiverUserId
                    });
                });
            
                peer.on('stream', remoteStream => {
                    const remoteVideo = document.createElement('video');
                    addVideoStream(remoteVideo, remoteStream);
                    remoteAudio.srcObject = remoteStream;
                    status.innerText = "Call connected!";
                    callButton.innerText = "Disconnect";
                    muteButton.disabled = false;
                    camButton.disabled= false;
                    callConnected = true;
                });
            }
            
            socket.on('signal', data => {
                if (!peer) {
                    peer = new SimplePeer({
                        initiator: false,
                        trickle: false,
                        stream: localStream
                    });
            
                    peer.on('signal', signal => {
                        socket.emit('signal', {
                            signal: signal,
                            fromUserId: senderUserId,
                            toUserId: data.fromUserId
                        });
                    });
            
                    peer.on('stream', remoteStream => {
                        const remoteVideo = document.createElement('video');
                        addVideoStream(remoteVideo, remoteStream);
                        remoteAudio.srcObject = remoteStream;
                        status.innerText = "Call connected!";
                        callButton.innerText = "Disconnect";
                        muteButton.disabled= false;
                        camButton.disabled= false;
                        callConnected = true;
                    });

                    peer.on('close', () => {
                        window.location.reload();
                    })
            
                    peer.signal(data.signal);
                } else {
                    peer.signal(data.signal);
                }
            });
            
            function disconnectCall() {
                if (peer) {
                    peer.destroy();
                    peer = null;
                }
            
                if (localStream) {
                    localStream.getTracks().forEach(track => track.stop());
                }
            
                socket.emit('disconnectCall', { toUserId: receiverUserId });
            
                window.location.reload(); 
            }
            
            function addVideoStream(video, stream) {
                video.srcObject = stream;
                video.addEventListener('loadedmetadata', () => {
                    video.play();
                });
                videoGrid.append(video);
            }

            function toggleMute(muted) {
                const audioTrack = localStream.getAudioTracks();
                audioTrack.forEach(track => track.enabled = !muted);
                muteButton.innerText= muted ? "Unmute" : "Mute";
            }

            function toggleCam(cam) {
                const videoTrack = localStream.getVideoTracks();
                videoTrack.forEach(track => track.enabled = !cam);
                camButton.innerText = cam ? "Enable Camera" : "Disable Camera";
            }
            
            socket.on('disconnectCall', () => {
                window.location.reload(); 
            });
            
        </script>
    </div>
</body>
</html>
